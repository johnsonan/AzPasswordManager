@page "/secretsvault" 
@using AzPasswordManager.Features.Secrets;
@using AzPasswordManager.Features.Secrets.Components;
@using MediatR
@using MudBlazor
@using AzPasswordManager.Features.Clipboard;
@using System.Collections
@using Microsoft.Identity.Client;
@using Microsoft.Identity.Web
@using System.Text.Json;
@inject IMediator Mediator
@inject ISnackbar SnackbarService;
@inject IDialogService DialogService;
@inject AuthenticationStateProvider _authenticationStateProvider;

<!-- TODO: Stylesheet -->
<style type="text/css">
    table tr .edit-button {
        opacity: 0;
        float: right
    }
    table tr:hover .edit-button {
        opacity: 1
    }
</style>
<CascadingValue Value="this">
    <MudOverlay @bind-Visible="isLoadingOverlayVisible" DarkBackground="true" ZIndex="9999">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>
    @if (secrets is not null)
    {
        <VaultLocationTabs @ref="_vaultLocationTabs" IndexChangedEvent=@((tabIndex) => SetDataGridView(tabIndex))/>
        <MudDataGrid 
                     Elevation="3"
                     ReadOnly=false
                     MultiSelection="true"
                     QuickFilter="@_quickFilter"
                     T="ISecretItem"
                     @ref="_secretsDataGrid"
                     SelectedItems="_selectedSecretItems"
                     SelectedItemsChanged="@((items) => OnSelectedItemsChanged(items))"
                     Hover = "true"
                     Items="FilteredSecrets" >
            <ToolBarContent>
                <SecretsDataGridButtons @ref="_secretsDataGridButtons" ButtonClickedEvent=@((Button) => ButtonClickHandler(Button)) />
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="ISecretItem" />
                <HierarchyColumn />
                <PropertyColumn Property="x => x.Name ?? string.Empty" Title="Name" />
                <PropertyColumn Property="x => x.Username ?? string.Empty" Title="Username" />
                <PropertyColumn Property="x => x.Url ?? string.Empty" Title="Url" />
                <TemplateColumn>
                    <CellTemplate>
                        <CascadingValue Value="@context">
                                <MudIconButton @onclick="@((e) => ShowEditDialog(context.Item))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style="height:100%" Class="edit-button" hidden=@(VaultLocationTabsIndex == 2) />
                        </CascadingValue>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <ChildRowContent>
                <SecretsAttributesCard Context="@context" />
            </ChildRowContent>
        </MudDataGrid>
    }
    else
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
    }
</CascadingValue>

@code {

    IEnumerable<ISecretItem>? secrets;
    IEnumerable<ISecretItem>? deletedSecrets;
    IEnumerable<ISecretItem>? FilteredSecrets;

    private HashSet<ISecretItem> _selectedSecretItems = new HashSet<ISecretItem>();
    private string? _searchString;

    public int VaultLocationTabsIndex = 0;
    public string CurrentUser = "";
    public bool isLoadingOverlayVisible = false;
    public bool _isOpen;
    public bool _copySucceeded;

    // Refs
    private VaultLocationTabs? _vaultLocationTabs;
    private SecretsDataGridButtons? _secretsDataGridButtons;
    private MudDataGrid<ISecretItem>? _secretsDataGrid;

    // Initial page render
    protected override async Task OnInitializedAsync()
    {
        secrets = (await Mediator.Send(new GetSecrets.Query())).Value;
        deletedSecrets = (await Mediator.Send(new GetDeletedSecrets.Query())).Value;
        CurrentUser = ((await _authenticationStateProvider.GetAuthenticationStateAsync()).User.Identities.FirstOrDefault())?.Name ?? "";
        FilteredSecrets = secrets.Where(item => item.VaultLocation != "Personal");
    }

    // DataGrid selected items handler
    // Manages state for "Delete" toolbar button
    public void OnSelectedItemsChanged(HashSet<ISecretItem> SelectedItems)
    {
        _selectedSecretItems = SelectedItems;

        if (_selectedSecretItems.Count == 0)
        {
            _secretsDataGridButtons?.DisableDeleteButton();
        } else
        {
            _secretsDataGridButtons?.EnableDeleteButton();
        }
    }

    // Click handler for toolbar buttons
    // Fired via event callback
    public async void ButtonClickHandler(string Button)
    {
        switch (Button)
        {
            case "Create":
                await ShowCreateDialog();
                break;
            case "Delete":
                await DeleteSelectedItems();
                break;
            case "Recover":
                await RecoverSelectedItems();
                break;
            case "Refresh":
                await RefreshSecrets();
                break;
        }
    }

    // Default MudDataGrid QuickFilter implementation for universal filtering
    private Func<ISecretItem, bool> _quickFilter => x =>
    {

        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.Name} {x.Username} {x.Url}".Contains(_searchString))
            return true;

        return false;
    };

    // Helper for refreshing secrets from Key Vault api
    public async Task RefreshSecrets()
    {
        var secretList = await Mediator.Send(new GetSecrets.Query());
        secrets = secretList.Value;
        SetDataGridView(VaultLocationTabsIndex);
        StateHasChanged();
    }

    // Helper for displaying loading spinner overlay
    public void ShowLoadingOverlay()
    {
        isLoadingOverlayVisible = true;
        StateHasChanged();
    }

    // Helper for hiding loading spinner overlay
    public void HideLoadingOverlay()
    {
        isLoadingOverlayVisible = false;
        StateHasChanged();
    }

    // Recovers selected items from the deleted secrets vault
    public async Task RecoverSelectedItems()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you would like to recover the {_selectedSecretItems.Count} selected secrets?",
            yesText: "Recover", cancelText: "Cancel");

        if (result is true)
        {
            ShowLoadingOverlay();

            foreach (ISecretItem Item in _selectedSecretItems)
            {
                await Mediator.Send(new RecoverDeletedSecret.Command
                    {
                        SecretName = Item.Name
                    });
            }

            _selectedSecretItems = new HashSet<ISecretItem>();
            await Task.Delay(3000);
            await RefreshSecrets();
            HideLoadingOverlay();
        }
    }

    // Deletes selected items and sends them to the deleted secrets vault
    public async Task DeleteSelectedItems()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you would like to delete the {_selectedSecretItems.Count} selected secrets?",
            yesText: "Delete", cancelText: "Cancel");

        ShowLoadingOverlay();

        if (result is not null)
        {
            isLoadingOverlayVisible = true;
            foreach (ISecretItem Item in _selectedSecretItems)
            {
                await Mediator.Send(new DeleteSecret.Command
                    {
                        SecretName = Item.Name
                    });
            }
            isLoadingOverlayVisible = false;
        }

        _selectedSecretItems = new HashSet<ISecretItem>();
        await RefreshSecrets();
        HideLoadingOverlay();
    }

    // Handles DataGrid item view based on tab index state
    public async void SetDataGridView(int index)
    {
        _secretsDataGridButtons?.DefaultView();
        _selectedSecretItems = new HashSet<ISecretItem>();

        VaultLocationTabsIndex = index;

        switch (index)
        {
            case 0:
                FilteredSecrets = secrets.Where(item => item.VaultLocation != "Personal");
                break;

            case 1:
                FilteredSecrets = secrets.Where(item => item.VaultLocation == "Personal" && item.PersonalVaultOwner == CurrentUser.ToString());
                break;

            case 2:
                _secretsDataGridButtons?.RecoveryVaultView();
                FilteredSecrets = (await Mediator.Send(new GetDeletedSecrets.Query())).Value;
                break;

            default:
                FilteredSecrets = secrets;
                break;
        }

        StateHasChanged();

    }

    // Valid
    async Task ShowEditDialog(ISecretItem secret)
    {
        var parameters = new DialogParameters<SecretEditDialog> { { x => x.secret, secret } };
        var dialog = DialogService.Show<SecretEditDialog>("Edit Secret", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshSecrets();
        }
    }

    // Valid
    async Task ShowCreateDialog()
    {
        var dialog = DialogService.Show<SecretEditDialog>("New Secret");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshSecrets();
        }
    }
}