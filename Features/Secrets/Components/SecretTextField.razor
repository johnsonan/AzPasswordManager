@namespace AzPasswordManager.Features.Secrets
@using System.Diagnostics
@using MediatR
@inject IMediator Mediator;

<MudTextField 
    Value="SecretValue" 
    Variant="Variant.Text"
    InputType="@PasswordInput"
    Adornment="Adornment.End" 
    AdornmentIcon="@PasswordInputIcon" 
    IconSize="Size.Small"
    OnAdornmentClick="@(() => VisibilityClick(@SecretItem.Item.Name))"
    AdornmentAriaLabel="Show Password" 
    ReadOnly=true
    FullWidth=false
    Style="width:100%"
/>


@code {

    [CascadingParameter]
    CellContext<ISecretItem> SecretItem { get; set; }    

    // Password adornment logic
    bool isShow;
    string SecretValue = "SuperSecretSecureDummyPassword";
    AzPasswordManager.Features.Secrets.SecretBundle secretBundle;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    async void VisibilityClick(string secretname)
    {

        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
            SecretValue = "SuperSecretSecureDummyPassword";
            StateHasChanged();
        }
        else
        {
            isShow = true;
            secretBundle = await Mediator.Send(new GetSecret.Query
                {
                    SecretName = secretname
                });
            SecretValue = secretBundle.Value;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
            StateHasChanged();
        }
    }
}