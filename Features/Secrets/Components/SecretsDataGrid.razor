@using MediatR
@using AzPasswordManager.Infrastructure
@inject IMediator Mediator
@inject ISnackbar SnackbarService;
@inject IDialogService DialogService;
@inject AuthenticationStateProvider _authenticationStateProvider;

<MudDataGrid Elevation="3"
             ReadOnly=false
             MultiSelection="true"
             QuickFilter="@_quickFilter"
             T="ISecretItem"
             @ref="_dataGrid"
             @bind-SelectedItems="_selectedSecretItems"
             Hover="true"
             Items="FilteredSecrets">

    <ToolBarContent>
        <MudStack Row=true>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" hidden=@(State.SecretsDataGrid.IsCreateButtonHidden) OnClick="OpenCreateDialog" StartIcon="@Icons.Material.Outlined.AddBox">Create</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" hidden=@(State.SecretsDataGrid.IsRecoverButtonHidden) OnClick="RecoverSelectedItems" StartIcon="@Icons.Material.Outlined.RestoreFromTrash">Recover</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="DeleteSelectedItems" Disabled=@(_dataGrid?.SelectedItems.Count == 0) StartIcon="@Icons.Material.Outlined.Delete">Delete</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="RefreshSecrets" StartIcon="@Icons.Material.Outlined.Refresh">Refresh</MudButton>
        </MudStack>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        <SelectColumn T="ISecretItem" />
        <HierarchyColumn />
        <PropertyColumn Property="x => x.Name ?? string.Empty" Title="Name" />
        <PropertyColumn Property="x => x.Username ?? string.Empty" Title="Username" />
        <PropertyColumn Property="x => x.Url ?? string.Empty" Title="Url" />
        <TemplateColumn>
            <CellTemplate>
                <CascadingValue Value="@context">
                    <MudIconButton @onclick="@((e) => OpenEditDialog(context.Item))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style="height:100%" Class="edit-button" hidden=@(State.SecretsDataGrid.IsEditButtonHidden) />
                </CascadingValue>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>

        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Attributes</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>Created: @context.Item.Attributes.Created</MudText>
                <MudText>Recovery Level: @context.Item.Attributes.RecoveryLabel</MudText>
                <MudText>Enabled: @context.Item.Attributes.Enabled</MudText>
                <MudText>Updated: @context.Item.Attributes.Updated</MudText>
                <MudText>VaultLocation: @context.Item.VaultLocation</MudText>
                <MudText>SecretUrl: @context.Item.Url</MudText>
                <MudText>PersonalVaultOwner: @context.Item.PersonalVaultOwner</MudText>
                <MudText>CurrentUser: @CurrentUser</MudText>
            </MudCardContent>

        </MudCard>
    </ChildRowContent>
</MudDataGrid>

@code {
    IEnumerable<ISecretItem> secrets;
    IEnumerable<ISecretItem> FilteredSecrets;
    IEnumerable<ISecretItem> GlobalSecrets;
    IEnumerable<ISecretItem> PersonalSecrets;
    IEnumerable<ISecretItem> DeletedSecrets;
    private MudDataGrid<ISecretItem>? _dataGrid;
    private MudTabs? _vaultLocationTabs;
    private HashSet<ISecretItem> _selectedSecretItems = new HashSet<ISecretItem>();

    public bool isLoadingOverlayVisible = false;
    public bool editBtnHidden = false;
    public bool recoverBtnHidden = true;
    public bool createBtnHidden = false;
    public string CurrentUser;
    public bool _isOpen;
    public bool _copySucceeded;
    private string _searchString;

    public async Task RefreshSecrets()
    {
        var secretList = await Mediator.Send(new GetSecrets.Query());
        secrets = secretList.Value;
        //SetTabPanelView(_vaultLocationTabs.ActivePanelIndex);
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<ISecretItem, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.Name} {x.Username} {x.Url}".Contains(_searchString))
            return true;

        return false;
    };

    public void ShowLoadingOverlay()
    {
        isLoadingOverlayVisible = true;
        StateHasChanged();
    }

    public async void HideLoadingOverlay()
    {
        isLoadingOverlayVisible = false;
        StateHasChanged();
    }

    // Prompts user to confirm selected secrets recovery
    public async void RecoverSelectedItems()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you would like to recover the {_selectedSecretItems.Count} selected secrets?",
            yesText: "Recover", cancelText: "Cancel");

        if (result is true)
        {
            ShowLoadingOverlay();

            foreach (ISecretItem Item in _selectedSecretItems)
            {
                await Mediator.Send(new RecoverDeletedSecret.Command
                    {
                        SecretName = Item.Name
                    });
            }

            _selectedSecretItems = new HashSet<ISecretItem>();
            await Task.Delay(3000);
            await RefreshSecrets();
            HideLoadingOverlay();
        }
    }

    public async void DeleteSelectedItems()
    {

        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you would like to delete the {_selectedSecretItems.Count} selected secrets?",
            yesText: "Delete", cancelText: "Cancel");

        ShowLoadingOverlay();

        if (result is not null)
        {
            isLoadingOverlayVisible = true;
            foreach (ISecretItem Item in _selectedSecretItems)
            {
                await Mediator.Send(new DeleteSecret.Command
                    {
                        SecretName = Item.Name
                    });
            }
            isLoadingOverlayVisible = false;
        }

        _selectedSecretItems = new HashSet<ISecretItem>();
        await RefreshSecrets();
        HideLoadingOverlay();
    }

    // Edit dialog logic
    async Task OpenEditDialog(ISecretItem secret)
    {
        var parameters = new DialogParameters<SecretEditDialog> { { x => x.secret, secret } };
        var dialog = DialogService.Show<SecretEditDialog>("Edit Secret", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshSecrets();
        }
    }

    async Task OpenCreateDialog()
    {
        var dialog = DialogService.Show<SecretEditDialog>("New Secret");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshSecrets();
        }
    }
}
