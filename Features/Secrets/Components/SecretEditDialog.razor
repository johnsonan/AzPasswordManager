@namespace AzPasswordManager.Features.Secrets
@using MediatR;
@inject IMediator Mediator
@inject IDialogService DialogService;
@inject ISnackbar SnackbarService;
@inject AuthenticationStateProvider _authenticationStateProvider;

<MudDialog>
    <DialogContent>
        <MudPaper>
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit" >
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Secret name"
                                      @bind-Value="model.SecretName" For="@(() => model.SecretName)" AdornmentColor="Color.Primary"/>
                        <MudTextField Label="Secret username"
                                      @bind-Value="model.SecretUsername" For="@(() => model.SecretUsername)" AdornmentColor="Color.Primary" />
                        <MudTextField Label="Secret value" HelperText="Enter a new secret value" Class="mt-3"
                                      @bind-Value="model.SecretValue" For="@(() => model.SecretValue)" InputType="InputType.Password" />
                        <MudTextField Label="Confirm secret value" HelperText="Repeat the secret value" Class="mt-3"
                                      @bind-Value="model.SecretValue2" For="@(() => model.SecretValue2)" InputType="InputType.Password" />
                        <MudTextField Label="Secret URL" HelperText="Optional URL for web secrets" Class="mt-3"
                                      @bind-Value="model.SecretUrl" For="@(() => model.SecretUrl)" />

                        <MudSelect @bind-Value="model.VaultLocation" T="string" Label="Vault Location" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value=@("Global") />
                            <MudSelectItem Value=@("Personal") />
                        </MudSelect>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@submitBtnText</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public AzPasswordManager.Features.Secrets.SecretItem? secret { get; set; }
    SecretEditModel model = new SecretEditModel();
    bool success; // success flag for valid submission using OnValidSubmit()
    string submitBtnText = "Create";

    protected override async Task OnInitializedAsync()
    {
        // Form logic
        if (MudDialog.Title.Contains("Edit"))
        {
            model.SecretName = secret?.Name ?? string.Empty;
            model.SecretValue = (await Mediator.Send(new GetSecret.Query {SecretName = secret?.Name}))?.Value ?? string.Empty;
            model.SecretValue2 = model.SecretValue ?? string.Empty;
            model.VaultLocation = secret?.VaultLocation ?? string.Empty;
            model.SecretUrl = secret?.Url ?? string.Empty;
            model.SecretUsername = secret?.Username ?? string.Empty;
            submitBtnText = "Update";
        }

        model.PersonalVaultOwner = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User.Identities.FirstOrDefault().Name;

    }

    // EditForm submit when valid method
    private async void OnValidSubmit(EditContext context)
    {
        success = true;

        try
        {
            var content = new
            {
                value = model.SecretValue,
                tags  = new
                {
                    Url                = model.SecretUrl,
                    Username           = model.SecretUsername,
                    VaultLocation      = model.VaultLocation,
                    PersonalVaultOwner = model.PersonalVaultOwner
                }
            };

            await Mediator.Send(new SetSecret.Command
            {
               SecretName = model.SecretName,
               RequestBody = content
            });

            SnackbarService.Add($"Secret updated successfully! 👍", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        } 
        catch
        {
            MudDialog.Close(DialogResult.Ok(false));
        } 
    }

    // Password adornment logic
    bool isShow = true;
    string SecretValue = "SuperSecretSecureDummyPassword";
    AzPasswordManager.Features.Secrets.SecretBundle secretBundle;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    async void VisibilityClick(string secretname)
    {

        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
            SecretValue = "SuperSecretSecureDummyPassword";
            StateHasChanged();
        }
        else
        {
            isShow = true;
            secretBundle = await Mediator.Send(new GetSecret.Query { SecretName = secretname });
            SecretValue = secretBundle.Value;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
            StateHasChanged();
        }
    }
}